---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_HTML3
title: 임베디드 요소

# post specific
# if not specified, .name will be used from _data/owner/[language].yml
#author: ""
# multiple category is not supported
category: HTML&CSS
# multiple tag entries are possible
tags: [HTML]
# thumbnail image for post
#img: ":post_pic1.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-09-06 17:19:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-09-13 14:47:12 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: true
---

## `img`

- 이미지 삽입
- 옵션

  - `src`

    - 필수 속성
    - 파일 경로
    - 큰 따옴표 안에 들어가는 경로는 **절대경로**이거나 **상대경로**
      <aside>
      📁 절대경로와 상대 경로
      **절대경로** : 현재 파일 위치와 관련없이 열 수 있는 경로
      **상대경로** : 나(지금 열려있는 파일) 기준

      </aside>

      ```html
      <!-- 스크린리더가 읽지 않습니다. -->
      <img src="a.jpg" alt="" />

      <!-- 스크린 리더가 'a'를 읽습니다. -->
      <img src="a.jpg" />

      <!-- 스크린 리더가 '이미지'를 읽습니다. -->
      <img src="a.jpg" alt="이미지" />
      ```

  - `alt`
    - alternative text
    - 이미지가 보이지 않을 때 보여줌
    - 스크린리더에 정보를 제공하기 위한 용도로 사용
    - 브라우저 이미지에 대한 정보를 전달함으로써 SEO에 도움을 주기도 함
  - `srcset`
    - 여러 해상도에 대응하여 브라우저가 최상의 이미지를 로딩하는데 도움을 줌
    - 다양한 크기를 가지는 동일한 이미지를 최소 2개 이상 사용할 때
      - 브라우저에게 이미지의 선택권을 위임
    - **x서술자, w서술자, sizes 속성**
      - x서술자는 화소의 밀도(pixel density)를 나타냅니다. 디바이스의 화소 밀도에 따른 이미지를 로딩하도록 브라우저에 알려줍니다.
      ```html
      <img
        width="200px"
        srcset="img/logo_1.png 2x, img/logo_2.png 3x"
        src="a.png"
        alt="test"
      />
      ```
        <aside>
        💡 Pixel density : 동일한 면적에 들어가는 화소의 수를 의미합니다. 화소의 갯수가 많을수록 더 높은 해상도의 기기임을 알 수 있습니다. 
        여러분이 보고있는 화면의 화소 밀도를 알고 싶으시다면 브라우저 api를 이용해서 보실 수 있습니다. 개발자 화면의 콘솔창에서 `window.devicePixelRatio` 명령어를 입력해보세요.
        
        </aside>
        
        - w서술자는 원본 이미지의 넓이가 차례대로 300px, 600px, 700px 임을 브라우저에게 알려줍니다. px이 아닌 w로 표기하는것에 주의하세요.
        
        ```html
        <img
        width="200px"
        srcset="img/logo_3.png 700w,
                img/logo_2.png 600w,
        				img/logo_1.png 300w"
        src="a.png"
        alt="test">
        ```
        
        <aside>
        💡 w서술자와 x서술자는 동시에 사용할 수 없습니다. 또한 `src` 속성을 유지하는 것은 필수입니다. `srcset` 을 사용할 수 없는 브라우저(Internet Explorer)를 대비해 사용하는 이미지입니다.
        
        </aside>
        
        - `sizes` 속성은 뷰포트의 조건에 따라 이미지가 UI안에서 차지하게 될 사이즈를 브라우저에 알려줍니다.
        
        ```html
        <img
        srcset="img/logo_3.png 700w,
                img/logo_2.png 600w,
        				img/logo_1.png 300w"
        sizes="(min-width: 960px) 250px,
        			 (min-width: 620px) 150px,
        			 300px"
        src="a.png"
        alt="test">
        ```
        
        브라우저는 우리가 제공한 이미지의 원본 사이즈와 뷰포트에 따른 이미지의 사이즈 정보를 통합해 가장 적절한 이미지를 로딩하게됩니다.
        
        물론 `srcset` 속성은 `sizes` 속성이 없다고 해도 잘 동작하겠지만, 웹표준을 준수하기 위해서는 `srcset` 속성을 사용하면 그에 맞는 `sizes` 속성도 반드시 명시되어야 합니다.
        
        <aside>
        💡 `sizes` 속성을 사용할 때 주의할 점은 CSS를 통한 이미지의 사이즈를 컨트롤 하는 방법과 충돌 할 수 있다는 점 입니다. (CSS 스타일이 `sizes` 속성에 우선합니다.) 협업할 때는 사전에 반드시 동료들에게 어떠한 방법으로 반응형 이미지를 처리했는지 공유합시다.
        
        </aside>

<br>

## `<picture>`

- `<source>` 요소와 `<img>` 요소를 통해 각기 다른 디스플레이 혹은 디바이스에 따라 조건에 맞는 이미지를 보여주는 요소
- `<img>` 요소의 `srcset` 이 화면에 따른 이미지의 크기를 조절한다면 `<picture>` 요소는 이미지 포맷 자체를 변경 할 수 있습니다.

  ```html
  <picture>
    <!-- 960이상 -->
    <source srcset="babies_large.jpeg" media="(min-width:960px)" />
    <!-- 620<=해상도<=960 -->
    <source srcset="babies.jpeg" media="(min-width:620px)" />
    <!-- 620미만 -->
    <img src="babies_small.jpeg" alt="귀여운 아기 팽귄들" />
  </picture>
  ```

  - **media 속성**
    `<picture>` 요소는 `media` 속성의 값을 통해 조건에 알맞는 이미지를 찾게 됩니다. 조건에 맞는 `<source>` 요소 안의 `srcset` 속성 값을 찾아 `<img>` 태그의 `src` 에 넣어 화면에 보여주게됩니다.
  - **type 속성**

    - 이미지의 포맷 타입을 브라우저에게 알려줌

      ```html
      <picture>
        <source srcset="babies.webp" type="image/webp" />
        <source srcset="babies.avif" type="image/avif" />
        <img src="babies.jpeg" alt="귀여운 아기 팽귄들" />
      </picture>
      ```

      - 위에서부터 차례대로 브라우저가 지원하는 포맷인지 탐색하며 만약 지원하지 않는 포매맷이라고 판단되면 다음 <source>요소로 넘어감
      - 이러한 방식의 크로스브라우징 기법을 <em>‘점진적 향상기법’</em>이라고 합니다.
        <aside>
        💡 <strong>점진적 향상기법</strong>
        기본적으로 예전 기술 환경에서 동작할 수 있는 기능을 구현해두고, 최신 기술을 사용할 수 있는 환경에서는 최신 기술을 제공하여 더 나은 사용자 경험을 제공할 수 있는 방법입니다.
            </aside>

            - 크로스브라우징 : 모든 브라우저에 다른 기종의 운용체계나 HTML 렌더링 기술로 웹페이지를 제작하는 방법론
            다양한 컴퓨터 환경이나 브라우저에서 정보를 동일하게 표현하기 위해 필요하다

        <aside>
        💡 <strong>이미지 포맷의 종류</strong>

      **GIF**(Graphics Interchange Format) :
      256색의 컬러만 표현 가능하기 때문에 선명하진 않지만 용량이 적게 듭니다. 투명은 표현 가능하지만 그 정도를 조절하는건 불가능하며, 때문에 그림자 표현도 불가능합니다. 애니메이션 처리가 가능합니다.

      **JPG/JPEG** (Joint Photographic Expert Group image):
      매우 화소가 높고, 용량도 적지만 투명처리가 불가능합니다.

      **PNG** (Portable Network Graphics) :
      왠만한 컬러는 모두 표현 가능하여 투명 영역을 처리 가능하지만 용량이 큽니다.

      **SVG** (Scalable Vector Graphics) :
      SVG 형식의 벡터 이미지는 손실이나 품질 저하 없이 모든 크기에서 렌더링이 가능합니다.

      **WebP** (Web Picture Format) :
      압축률이 좋다고 소문난 JPEG 이미지에 비해 무려 용량은 70% 수준으로 낮지만 더 뛰어난 색상을 지원하는 포맷입니다. 그럼에도 불구하고 PNG 처럼 투명도 표현 가능하며, GIF 처럼 애니메이션 표현도 가능한 만능 포맷입니다.

      **AVIF** (AV1 Image File Format) : WebP 처럼 뛰어난 색상표현, 애니메이션 지원, 투명도 표현 모두 가능하며 JPEG 이미지의 50% 수준인 용량을 자랑하는 차세대 이미지 포맷입니다. 아직 지원하지 않는 브라우저가 많음에 주의해야합니다.

      </aside>

## `<iframe>`

- 현재 HTML 페이지에서 또 다른 HTML 페이지를 보여주고 싶을 때 사용
- width, height 속성으로 크기 조절
  - width, height initial value
    - `height: 150px`, `width: 300px`

```html
<iframe src="링크"></iframe>
```

- 유튜브 영상을 불러올 때 많이 사용
  - 유튜브 영상 우클릭 → 소스코드 복사하면 `<iframe>`형태로 복사됨
    ```html
    <iframe
      width="1280"
      height="720"
      src="https://www.youtube.com/embed/-iuX3r8PSzU"
      frameborder="0"
      allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
      allowfullscreen
    >
    </iframe>
    ```
- 속성값
  - `frameborder` : 테두리를 그려줄지 결정합니다. 0 혹은 1의 값을 가집니다. 이제 더는 사용하지 않는 값이며 CSS의 border 속성을 대체되었습니다.
  - `allow` : iframe 에서 허용할 기능들을 지정합니다.
  - `allowfullscreen` : 전체화면을 지원합니다.
- 해킹 공격에 이용될 수 있어 사용에 주의

> 💡 autoplay 속성은 브라우저 정책 상 일부 모바일 브라우저에 작동하지 않을 수 있으며, 항상 mute 속성과 함께 사용되어야 합니다.
> 이는 모바일 환경에서 autoplay 기능으로 인한 의도하지 않은 트래픽 유발을 방지하고 접근성 측면에서 좋지 않기 때문입니다.
> 이러한 특징은 `<iframe>`, `<audio>`, `<video>` 요소 모두 동일하게 적용됩니다.

- 참고 : [https://developer.mozilla.org/ko/docs/Web/Media/Autoplay_guide](https://developer.mozilla.org/ko/docs/Web/Media/Autoplay_guide)
- 나쁜 예 : [https://codingparty.goorm.io/codinghero](https://codingparty.goorm.io/codinghero)

[YouTube 내장 플레이어 및 플레이어 매개변수 | YouTube IFrame Player API | Google Developers](https://developers.google.com/youtube/player_parameters?hl=ko)

YouTube 지원 매개변수

<br>

## `<audio>`

- 음악 재생

```html
<audio src="폴더/파일명" controls autoplay loop></audio>
```

- `controls` : 재생 컨트롤러를 불러옴
- `autoplay` : 자동 재생
  - (Chrome에서 정책상 autoplay가 안됩니다. 간혹 되는 경우도 있으나 정책상 안되는 것이 맞습니다. 그래서 js로 컨트롤합니다.)
- `loop` : 음악을 반복

```html
<audio controls>
  <source src="flow.ogg" type="audio/ogg" />
  <source src="flow.mp3" type="audio/mpeg" />
</audio>
```

- `<audio>` 요소 역시 `<source>` 요소를 자식으로 사용할 수 있습니다. 다른 요소와 마찬가지로 크로스 브라우징을 위해 여러 포맷의 파일을 지원할 수 있습니다.

<br>

## `<video>`

- 동영상 재생

```html
<video src="batman.mp4" controls autoplay loop width="450" height="300"></video>
```

- `src` : 파일 경로
- `controls` : 재생 컨트롤러를 불러옴
- `autoplay` : 로딩이 완료되면 자동 재생
- `loop` : 영상이 종료되면 다시 반복

다음과 같은 코드를 사용하면 크로스브라우징과, 좀 더 사용자 친화적인 비디오를 구현 할 수 있습니다.

```html
<video controls poster="batman.jpeg" preload="auto" width="450" height="300">
  <source src="batman.mp4" type="video/mp4" />
  <source src="batman.ogv" type="video/ogg" />
  <source src="batman.webm" type="video/webm" />
  <track kind="subtitles" src="foo.en.vtt" srclang="ko" label="batman" />
</video>
```

- `preload` : 좋은 사용자 경험을 위해 고려해 볼 수 있는 속성입니다. (기본 값은 브라우저마다 다릅니다.)
  - `none` : 비디오 파일을 미리 로딩하지 않습니다. 서버가 최소한의 트래픽을 유지하며 페이지 로딩이 좀 더 빨라집니다.
  - `metadata` : 비디오 파일을 미리 로딩하지 않지만 파일의 메타데이터(예를 들어서 영상의 길이)를 미리 가져오도록 합니다.
  - `auto` : 비디오 파일을 미리 로딩하여 사용자가 바로 영상을 볼 수 있도록 준비합니다.
- `poster` : 영상이 로딩 중 일 때 대신해서 화면에 보여줄 이미지를 지정
- `<source>` : 다른 embedded 요소들과 마찬가지로 source 요소를 통해 브라우저가 지원하는 파일 포멧을 여러가지 지정할 수 있습니다.
- `<track>` : `<audio>` 혹은 `<video>` 요소의 자식으로 자막과 같은 시간 기반 텍스트 데이터(텍스트 트랙)를 보여주고자 할 때 사용합니다.
  - `kind` : 텍스트 트랙의 종류를 지정합니다. subtitles(자막), captions(설명) 등을 지정할 수 있습니다.
  - `srclang` : 텍스트 트랙의 언어를 지정합니다.
  - `label` : 텍스트 트랙의 제목을 정합니다.
